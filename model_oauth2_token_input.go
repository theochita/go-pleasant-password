/*
pleasant password server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Oauth2TokenInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Oauth2TokenInput{}

// Oauth2TokenInput 
type Oauth2TokenInput struct {
	GrantType string `json:"grant_type"`
	Username string `json:"username"`
	Password string `json:"password"`
}

// NewOauth2TokenInput instantiates a new Oauth2TokenInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2TokenInput(grantType string, username string, password string) *Oauth2TokenInput {
	this := Oauth2TokenInput{}
	this.GrantType = grantType
	this.Username = username
	this.Password = password
	return &this
}

// NewOauth2TokenInputWithDefaults instantiates a new Oauth2TokenInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2TokenInputWithDefaults() *Oauth2TokenInput {
	this := Oauth2TokenInput{}
	return &this
}

// GetGrantType returns the GrantType field value
func (o *Oauth2TokenInput) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInput) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *Oauth2TokenInput) SetGrantType(v string) {
	o.GrantType = v
}

// GetUsername returns the Username field value
func (o *Oauth2TokenInput) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInput) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Oauth2TokenInput) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *Oauth2TokenInput) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInput) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *Oauth2TokenInput) SetPassword(v string) {
	o.Password = v
}

func (o Oauth2TokenInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2TokenInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grant_type"] = o.GrantType
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableOauth2TokenInput struct {
	value *Oauth2TokenInput
	isSet bool
}

func (v NullableOauth2TokenInput) Get() *Oauth2TokenInput {
	return v.value
}

func (v *NullableOauth2TokenInput) Set(val *Oauth2TokenInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2TokenInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2TokenInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2TokenInput(val *Oauth2TokenInput) *NullableOauth2TokenInput {
	return &NullableOauth2TokenInput{value: val, isSet: true}
}

func (v NullableOauth2TokenInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2TokenInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


