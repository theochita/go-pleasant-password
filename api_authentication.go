/*
pleasant password server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AuthenticationAPIService AuthenticationAPI service
type AuthenticationAPIService service

type ApiPostOauthTokenRequest struct {
	ctx context.Context
	ApiService *AuthenticationAPIService
	grantType *string
	username *string
	password *string
	xPleasantOTP *string
	xPleasantOTPProvider *string
}

func (r ApiPostOauthTokenRequest) GrantType(grantType string) ApiPostOauthTokenRequest {
	r.grantType = &grantType
	return r
}

func (r ApiPostOauthTokenRequest) Username(username string) ApiPostOauthTokenRequest {
	r.username = &username
	return r
}

func (r ApiPostOauthTokenRequest) Password(password string) ApiPostOauthTokenRequest {
	r.password = &password
	return r
}

// Only Required if user is Oauth
func (r ApiPostOauthTokenRequest) XPleasantOTP(xPleasantOTP string) ApiPostOauthTokenRequest {
	r.xPleasantOTP = &xPleasantOTP
	return r
}

// Only required if user is Oauth
func (r ApiPostOauthTokenRequest) XPleasantOTPProvider(xPleasantOTPProvider string) ApiPostOauthTokenRequest {
	r.xPleasantOTPProvider = &xPleasantOTPProvider
	return r
}

func (r ApiPostOauthTokenRequest) Execute() (*Oauth2TokenOutput, *http.Response, error) {
	return r.ApiService.PostOauthTokenExecute(r)
}

/*
PostOauthToken Method for PostOauthToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostOauthTokenRequest
*/
func (a *AuthenticationAPIService) PostOauthToken(ctx context.Context) ApiPostOauthTokenRequest {
	return ApiPostOauthTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Oauth2TokenOutput
func (a *AuthenticationAPIService) PostOauthTokenExecute(r ApiPostOauthTokenRequest) (*Oauth2TokenOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Oauth2TokenOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIService.PostOauthToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OAuth2/Token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}
	if r.username == nil {
		return localVarReturnValue, nil, reportError("username is required and must be specified")
	}
	if r.password == nil {
		return localVarReturnValue, nil, reportError("password is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xPleasantOTP != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Pleasant-OTP", r.xPleasantOTP, "")
	}
	if r.xPleasantOTPProvider != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Pleasant-OTP-Provider", r.xPleasantOTPProvider, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "username", r.username, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "password", r.password, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WithDescriptionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
